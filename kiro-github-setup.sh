#!/bin/bash

# Kiro to GitHub Integration Setup Script
# This script sets up the complete workflow for integrating Kiro planning with GitHub

set -e

echo "🚀 Setting up Kiro to GitHub Integration..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    print_error "This script must be run from the root of a git repository"
    exit 1
fi

# Check for required files
REQUIREMENTS_FILE=".kiro/specs/file-action-bar/requirements.md"
DESIGN_FILE=".kiro/specs/file-action-bar/design.md"
TASKS_FILE=".kiro/specs/file-action-bar/tasks.md"

print_info "Checking for Kiro planning files..."

if [ ! -f "$REQUIREMENTS_FILE" ]; then
    print_error "requirements.md not found in current directory"
    echo "Please ensure your Kiro requirements file is named 'requirements.md'"
    exit 1
fi

if [ ! -f "$DESIGN_FILE" ]; then
    print_error "design.md not found in current directory"
    echo "Please ensure your Kiro design file is named 'design.md'"
    exit 1
fi

if [ ! -f "$TASKS_FILE" ]; then
    print_error "tasks.md not found in current directory"
    echo "Please ensure your Kiro tasks file is named 'tasks.md'"
    exit 1
fi

print_status "All Kiro planning files found"

# Create .github directory structure
print_info "Creating GitHub workflow structure..."

mkdir -p .github/workflows
mkdir -p .github/ISSUE_TEMPLATE
mkdir -p .github/PULL_REQUEST_TEMPLATE

# Create main integration workflow
cat > .github/workflows/kiro-integration.yml << 'EOF'
# This file was generated by Kiro GitHub Integration Setup
# .github/workflows/kiro-integration.yml
name: Kiro to GitHub Integration

on:
  workflow_dispatch:
    inputs:
      requirements_file:
        description: 'Path to requirements.md file'
        required: true
        default: 'requirements.md'
      design_file:
        description: 'Path to design.md file'
        required: true
        default: 'design.md'
      tasks_file:
        description: 'Path to tasks.md file'
        required: true
        default: 'tasks.md'
      project_name:
        description: 'Project name for issue titles'
        required: true
        default: 'Kiro Feature Implementation'
      milestone_name:
        description: 'Milestone name (optional)'
        required: false

jobs:
  parse-and-create:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install -g markdown-it js-yaml
        
    - name: Create milestone
      id: create-milestone
      if: ${{ inputs.milestone_name != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        MILESTONE_NAME="${{ inputs.milestone_name }}"
        RESPONSE=$(gh api repos/${{ github.repository }}/milestones \
          --method POST \
          --field title="$MILESTONE_NAME" \
          --field description="Auto-generated milestone from Kiro planning")
        MILESTONE_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
        echo "milestone_number=$MILESTONE_NUMBER" >> $GITHUB_OUTPUT
        echo "Created milestone: $MILESTONE_NAME (#$MILESTONE_NUMBER)"
        
    - name: Parse and create issues
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node << 'SCRIPT_EOF'
        const fs = require('fs');
        
        // Read Kiro files
        const requirements = fs.readFileSync('${{ inputs.requirements_file }}', 'utf8');
        const design = fs.readFileSync('${{ inputs.design_file }}', 'utf8');
        const tasks = fs.readFileSync('${{ inputs.tasks_file }}', 'utf8');
        
        // Create epic issue
        const epicBody = `## Epic: ${{ inputs.project_name }}

### Overview
This epic tracks the implementation of the ${{ inputs.project_name }} feature based on Kiro-generated planning documents.

### Requirements Summary
${requirements.split('## Requirements')[1]?.split('### Requirement 1')[0]?.trim() || 'See requirements.md'}

### Architecture Overview  
${design.split('## Architecture')[1]?.split('### Component Structure')[0]?.trim() || 'See design.md'}

### Related Documents
- [Requirements](requirements.md)
- [Design](design.md)
- [Tasks](tasks.md)

### Acceptance Criteria
- [ ] All task items completed
- [ ] Requirements validated
- [ ] Code reviewed and approved
- [ ] Tests passing

This epic was auto-generated from Kiro planning documents.`;

        console.log('Creating epic issue...');
        
        // Parse tasks and create individual issues
        const taskRegex = /- \[([ x])\] (\d+)\. (.*?)(?=\n(?:  - |_Requirements:|\n|$))/gs;
        const taskMatches = [...tasks.matchAll(taskRegex)];
        
        console.log(`Found ${taskMatches.length} tasks to process`);
        
        taskMatches.forEach((match, index) => {
          const [fullMatch, completed, taskNumber, taskContent] = match;
          const isCompleted = completed === 'x';
          
          // Extract task details
          const lines = taskContent.trim().split('\n');
          const title = lines[0].trim();
          const description = lines.slice(1).join('\n').trim();
          
          // Extract requirements
          const requirementsMatch = fullMatch.match(/_Requirements: (.*?)_/);
          const requirements = requirementsMatch ? requirementsMatch[1] : '';
          
          console.log(`Task ${taskNumber}: ${title} ${isCompleted ? '(completed)' : '(pending)'}`);
        });
        SCRIPT_EOF
        
    - name: Create GitHub issues using GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create epic issue
        EPIC_NUMBER=$(gh issue create \
          --title "Epic: ${{ inputs.project_name }}" \
          --body-file /dev/stdin \
          --label "epic,enhancement" \
          ${MILESTONE_NUMBER:+--milestone "$MILESTONE_NUMBER"} \
          --json number --jq .number << 'EOF'
## Epic: ${{ inputs.project_name }}

This epic tracks the implementation of the ${{ inputs.project_name }} feature based on Kiro-generated planning documents.

### Related Documents
- [Requirements](${{ inputs.requirements_file }})
- [Design](${{ inputs.design_file }})
- [Tasks](${{ inputs.tasks_file }})

### Acceptance Criteria
- [ ] All task items completed
- [ ] Requirements validated  
- [ ] Code reviewed and approved
- [ ] Tests passing

*Auto-generated from Kiro planning*
EOF
        )
        
        echo "Created epic issue #$EPIC_NUMBER"
        echo "epic_number=$EPIC_NUMBER" >> $GITHUB_ENV
        
        # Parse tasks file and create individual issues
        python3 << 'PYTHON_EOF'
import re
import subprocess
import os

# Read tasks file
with open('${{ inputs.tasks_file }}', 'r') as f:
    tasks_content = f.read()

# Parse tasks
task_pattern = r'- \[([ x])\] (\d+)\. (.*?)(?=\n(?:  - |_Requirements:|\n- \[|$))'
matches = re.findall(task_pattern, tasks_content, re.DOTALL)

epic_number = os.environ.get('epic_number', '')
milestone_arg = '--milestone "${{ steps.create-milestone.outputs.milestone_number }}"' if '${{ steps.create-milestone.outputs.milestone_number }}' else ''

for completed, task_num, content in matches:
    is_completed = completed == 'x'
    
    # Extract title (first line)
    lines = content.strip().split('\n')
    title = lines[0].strip()
    description = '\n'.join(lines[1:]).strip()
    
    # Extract requirements
    req_match = re.search(r'_Requirements: (.*?)_', content)
    requirements = req_match.group(1) if req_match else 'Not specified'
    
    issue_body = f"""## Task #{task_num}: {title}

### Description
{description}

### Requirements Covered
{requirements}

### Related Epic
Part of epic #{epic_number}

### Definition of Done
- [ ] Implementation completed
- [ ] Unit tests written and passing
- [ ] Code reviewed
- [ ] Requirements validated
- [ ] Documentation updated

*Auto-generated from Kiro tasks*
"""
    
    # Create issue
    labels = 'task,enhancement'
    if is_completed:
        labels += ',completed'
    
    cmd = [
        'gh', 'issue', 'create',
        '--title', f'Task {task_num}: {title}',
        '--body', issue_body,
        '--label', labels
    ]
    
    if '${{ steps.create-milestone.outputs.milestone_number }}':
        cmd.extend(['--milestone', '${{ steps.create-milestone.outputs.milestone_number }}'])
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        issue_data = result.stdout.strip()
        print(f"Created issue for task {task_num}: {title}")
        
        # If task is completed, close the issue
        if is_completed:
            issue_url = issue_data.split('/')[-1] if '/' in issue_data else issue_data
            close_cmd = ['gh', 'issue', 'close', issue_url, '--reason', 'completed']
            subprocess.run(close_cmd)
            print(f"Closed completed task {task_num}")
    else:
        print(f"Failed to create issue for task {task_num}: {result.stderr}")
PYTHON_EOF

EOF

print_status "Created Kiro integration workflow"

# Create auto PR workflow
cat > .github/workflows/auto-pr-creation.yml << 'EOF'
# This file was generated by Kiro GitHub Integration Setup
name: Auto PR Creation from Completed Tasks

on:
  push:
    branches:
      - 'feature/task-*'
      - 'task/*'
      - 'feat/task-*'
  workflow_dispatch:
    inputs:
      task_number:
        description: 'Task number to create PR for'
        required: true
      base_branch:
        description: 'Base branch for PR'
        required: false
        default: 'main'

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract task info and create PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract task number
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TASK_NUMBER="${{ inputs.task_number }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
          TASK_NUMBER=$(echo $BRANCH_NAME | grep -oE '[0-9]+' | head -1)
        fi
        
        if [ -z "$TASK_NUMBER" ]; then
          echo "No task number found"
          exit 1
        fi
        
        echo "Processing task number: $TASK_NUMBER"
        
        # Check if PR already exists
        BASE_BRANCH="${{ inputs.base_branch || 'main' }}"
        EXISTING_PR=$(gh pr list --head "${{ github.ref_name }}" --base "$BASE_BRANCH" --json number --jq '.[0].number // empty')
        
        if [ ! -z "$EXISTING_PR" ]; then
          echo "PR already exists: #$EXISTING_PR"
          exit 0
        fi
        
        # Find related issue
        ISSUE_NUMBER=$(gh issue list --search "Task $TASK_NUMBER:" --json number --jq '.[0].number // empty')
        
        if [ -z "$ISSUE_NUMBER" ]; then
          echo "No issue found for task $TASK_NUMBER"
          exit 1
        fi
        
        # Get issue details
        ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --json title --jq .title)
        
        # Generate commit summary
        COMMITS=$(git log --pretty=format:"- %s" $BASE_BRANCH..${{ github.ref_name }} | head -10)
        
        # Create PR
        PR_TITLE=$(echo "$ISSUE_TITLE" | sed "s/Task $TASK_NUMBER: //g")
        
        PR_BODY="## $ISSUE_TITLE

### Description
This PR implements the changes for task $TASK_NUMBER as part of the Kiro-planned feature development.

### Related Issues
- Resolves #$ISSUE_NUMBER

### Changes Made
$COMMITS

### Testing Checklist  
- [ ] Unit tests added/updated
- [ ] Integration tests pass
- [ ] Manual testing completed
- [ ] Edge cases tested

### Code Quality Checklist
- [ ] Code follows project standards
- [ ] TypeScript types properly defined
- [ ] Error handling implemented
- [ ] No console.log statements left

### Review Checklist
- [ ] Functionality matches requirements
- [ ] Code is readable and maintainable
- [ ] Performance considerations addressed
- [ ] Security considerations addressed

---
*Auto-generated from Kiro task tracking*"

        PR_NUMBER=$(gh pr create \
          --title "$PR_TITLE" \
          --body "$PR_BODY" \
          --base "$BASE_BRANCH" \
          --head "${{ github.ref_name }}" \
          --label "task,kiro-generated" \
          --json number --jq .number)
        
        echo "✅ Created PR #$PR_NUMBER: $PR_TITLE"
        
        # Link PR to issue
        gh issue comment $ISSUE_NUMBER --body "🔗 Pull Request created: #$PR_NUMBER"

EOF

print_status "Created auto PR creation workflow"

# Create issue templates
cat > .github/ISSUE_TEMPLATE/kiro-task.md << 'EOF'
---
name: Kiro Task
about: Template for tasks generated from Kiro planning
title: 'Task [NUMBER]: [TITLE]'
labels: ['task', 'enhancement']
assignees: ''
---

## Task Description
<!-- Detailed description of the task -->

## Requirements Covered
<!-- List the requirement IDs this task addresses -->

## Definition of Done
- [ ] Implementation completed
- [ ] Unit tests written and passing
- [ ] Code reviewed and approved
- [ ] Requirements validated
- [ ] Documentation updated

## Related Epic
<!-- Link to the related epic issue -->

## Additional Context
<!-- Any additional context or notes -->
EOF

# Create pull request template
cat > .github/pull_request_template.md << 'EOF'
## Pull Request

### Description
Brief description of the changes implemented in this PR.

### Related Issues
- Resolves #[ISSUE_NUMBER]
- Related to Epic #[EPIC_NUMBER]

### Changes Made
- [ ] Component implementation
- [ ] Service implementation  
- [ ] Template updates
- [ ] Styling updates
- [ ] API integration
- [ ] Tests added

### Testing Checklist
- [ ] Unit tests added/updated
- [ ] Integration tests pass
- [ ] Manual testing completed
- [ ] Edge cases tested
- [ ] Error handling tested

### Code Quality Checklist
- [ ] Code follows project standards
- [ ] TypeScript types properly defined
- [ ] Error handling implemented
- [ ] Loading states implemented
- [ ] No console.log statements left

### Review Checklist
- [ ] Functionality matches requirements
- [ ] Code is readable and maintainable
- [ ] Performance considerations addressed
- [ ] Security considerations addressed
- [ ] Accessibility requirements met

### Screenshots/Demo
<!-- Add screenshots or GIF demos of the functionality -->

### Deployment Notes
<!-- Any special deployment considerations -->
EOF

print_status "Created GitHub templates"

# Create helper scripts
mkdir -p scripts

# Create task branch creation script
cat > scripts/create-task-branch.sh << 'EOF'
#!/bin/bash
# Create a branch for a specific task

if [ $# -eq 0 ]; then
    echo "Usage: $0 <task_number> [base_branch]"
    echo "Example: $0 04 main"
    exit 1
fi

TASK_NUMBER=$(printf "%02d" $1)
BASE_BRANCH=${2:-main}

BRANCH_NAME="feature/task-$TASK_NUMBER"

echo "Creating branch $BRANCH_NAME from $BASE_BRANCH..."

git checkout $BASE_BRANCH
git pull origin $BASE_BRANCH
git checkout -b $BRANCH_NAME

echo "✅ Created and switched to branch: $BRANCH_NAME"
echo "💡 When you're ready to create a PR, just push this branch:"
echo "   git push -u origin $BRANCH_NAME"
EOF

chmod +x scripts/create-task-branch.sh

# Create quick setup script for new features
cat > scripts/setup-kiro-feature.sh << 'EOF'
#!/bin/bash
# Quick setup script for new Kiro features

echo "🚀 Kiro Feature Setup"
echo "===================="

read -p "Enter project/feature name: " PROJECT_NAME
read -p "Enter milestone name (optional): " MILESTONE_NAME

echo "Setting up GitHub integration for: $PROJECT_NAME"

# Trigger the GitHub workflow
if [ -z "$MILESTONE_NAME" ]; then
    gh workflow run kiro-integration.yml \
      -f project_name="$PROJECT_NAME" \
      -f requirements_file="requirements.md" \
      -f design_file="design.md" \
      -f tasks_file="tasks.md"
else
    gh workflow run kiro-integration.yml \
      -f project_name="$PROJECT_NAME" \
      -f milestone_name="$MILESTONE_NAME" \
      -f requirements_file="requirements.md" \
      -f design_file="design.md" \
      -f tasks_file="tasks.md"
fi

echo "✅ GitHub workflow triggered!"
echo "🔗 Check the Actions tab to see the progress"
echo "📋 Issues and milestone will be created automatically"
EOF

chmod +x scripts/setup-kiro-feature.sh

print_status "Created helper scripts"

# Create README for the integration
cat > KIRO_GITHUB_INTEGRATION.md << 'EOF'
# Kiro to GitHub Integration

This repository has been set up with automated workflows to convert Kiro planning documents into GitHub issues, pull requests, and project management.

## Quick Start

1. **Initial Setup**: Run the integration workflow
   ```bash
   ./scripts/setup-kiro-feature.sh
   ```

2. **Create Task Branch**: 
   ```bash
   ./scripts/create-task-branch.sh <task_number>
   ```

3. **Auto PR Creation**: When you push a task branch, a PR is automatically created

## Workflow Overview

### Files Structure
- `requirements.md` - Kiro requirements document
- `design.md` - Kiro design document  
- `tasks.md` - Kiro implementation tasks
- `.github/workflows/` - Automated workflows
- `scripts/` - Helper scripts

### Automated Workflows

#### 1. Kiro Integration Workflow
**Trigger**: Manual workflow dispatch
**Purpose**: Creates issues and milestones from Kiro documents

Features:
- Creates epic issue from requirements/design
- Creates individual task issues
- Sets up milestone tracking
- Links all issues together

#### 2. Auto PR Creation
**Trigger**: Push to `feature/task-*` or `task/*` branches  
**Purpose**: Automatically creates PRs for task branches

Features:
- Links PR to related issue
- Generates PR description from commits
- Adds appropriate labels
- Sets up review checklist

### Branch Naming Convention

Use these branch naming patterns for automatic PR creation:
- `feature/task-01` - Feature branch for task 1
- `task/05` - Task branch for task 5  
- `feat/task-12` - Alternative feature branch

### Issue Management

Issues are automatically created with:
- Task number and title from Kiro tasks
- Requirements coverage information
- Definition of done checklist
- Links to epic and related documents
- Appropriate labels and milestones

### Usage Tips

1. **Start with Planning**: Ensure your Kiro files (requirements.md, design.md, tasks.md) are complete
2. **Run Integration**: Use the setup script to create all GitHub issues
3. **Work on Tasks**: Create branches using the helper script
4. **Auto PRs**: Push branches to automatically create pull requests
5. **Track Progress**: Use GitHub Projects or milestone views to track progress

### Customization

You can customize the integration by:
- Modifying workflow files in `.github/workflows/`
- Updating templates in `.github/ISSUE_TEMPLATE/` and `.github/PULL_REQUEST_TEMPLATE/`
- Adjusting helper scripts in `scripts/`

### Requirements

- GitHub CLI (`gh`) installed and authenticated
- Node.js and npm (for workflow dependencies)  
- Python 3 (for task parsing)
- Proper repository permissions (issues, PRs, workflows)

## Troubleshooting

### Common Issues

1. **Workflow fails**: Check that all Kiro files exist and are properly formatted
2. **Issues not created**: Verify GitHub token permissions include issues and milestones
3. **Auto PR fails**: Ensure branch naming follows the convention

### Getting Help

Check the workflow logs in the Actions tab for detailed error information.
EOF

print_status "Created integration documentation"

# Final setup steps
echo ""
print_info "Final setup steps..."

# Check if GitHub CLI is installed
if ! command -v gh &> /dev/null; then
    print_warning "GitHub CLI (gh) is not installed. Please install it to use the helper scripts."
    print_info "Install from: https://cli.github.com/"
else
    print_status "GitHub CLI is available"
fi

# Check if user is authenticated with GitHub CLI
if command -v gh &> /dev/null && gh auth status &> /dev/null; then
    print_status "GitHub CLI is authenticated"
else
    print_warning "GitHub CLI is not authenticated. Run 'gh auth login' to authenticate."
fi

print_status "Kiro GitHub Integration setup complete!"

echo ""
echo "📋 What was created:"
echo "   - GitHub workflows for automation"
echo "   - Issue and PR templates"  
echo "   - Helper scripts in scripts/"
echo "   - Integration documentation"
echo ""
echo "🚀 Next steps:"
echo "   1. Review your Kiro files (requirements.md, design.md, tasks.md)"
echo "   2. Run: ./scripts/setup-kiro-feature.sh"
echo "   3. Start working on tasks using: ./scripts/create-task-branch.sh <task_number>"
echo ""
echo "📖 For detailed instructions, see: KIRO_GITHUB_INTEGRATION.md"