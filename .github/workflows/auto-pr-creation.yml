# .github/workflows/auto-pr-creation.yml
name: Auto PR Creation from Completed Tasks

on:
  push:
    branches:
      - 'feature/task-*'
      - 'task/*'
      - 'feat/task-*'
  workflow_dispatch:
    inputs:
      task_number:
        description: 'Task number to create PR for'
        required: true
      base_branch:
        description: 'Base branch for PR'
        required: false
        default: 'main'

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract task number from branch
        id: extract-task
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TASK_NUMBER="${{ inputs.task_number }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            # Extract task number from branch name (e.g., feature/task-04, task/04)
            TASK_NUMBER=$(echo $BRANCH_NAME | grep -oE '[0-9]+' | head -1)
          fi
          
          if [ -z "$TASK_NUMBER" ]; then
            echo "No task number found in branch name or input"
            exit 1
          fi
          
          echo "task_number=$TASK_NUMBER" >> $GITHUB_OUTPUT
          echo "Task number: $TASK_NUMBER"

      - name: Find corresponding issue
        id: find-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_NUMBER="${{ steps.extract-task.outputs.task_number }}"
          
          # Search for issue with task number in title
          ISSUE_NUMBER=$(gh issue list --search "Task $TASK_NUMBER:" --json number --jq '.[0].number // empty')
          
          if [ -z "$ISSUE_NUMBER" ] || [ "$ISSUE_NUMBER" = "null" ]; then
            echo "No open issue found for task $TASK_NUMBER"
            exit 1
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "Found issue #$ISSUE_NUMBER for task $TASK_NUMBER"

      - name: Get issue details
        id: issue-details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER="${{ steps.find-issue.outputs.issue_number }}"
          
          ISSUE_DETAILS=$(gh issue view $ISSUE_NUMBER --json title,milestone)
          
          ISSUE_TITLE=$(echo "$ISSUE_DETAILS" | jq -r '.title')
          MILESTONE_NUMBER=$(echo "$ISSUE_DETAILS" | jq -r '.milestone.number // empty')
          
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          echo "milestone_number=$MILESTONE_NUMBER" >> $GITHUB_OUTPUT

      - name: Check if PR already exists
        id: check-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_BRANCH="${{ inputs.base_branch || 'main' }}"
          
          EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --base "$BASE_BRANCH" --json number --jq '.[0].number // empty')
          
          if [ ! -z "$EXISTING_PR" ]; then
            echo "PR already exists: #$EXISTING_PR"
            echo "pr_exists=true" >> $GITHUB_OUTPUT
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate commit summary
        id: commit-summary
        if: steps.check-pr.outputs.pr_exists == 'false'
        run: |
          BASE_BRANCH="${{ inputs.base_branch || 'main' }}"
          
          # Get commit messages since branching
          COMMITS=$(git log --pretty=format:"- %s" $BASE_BRANCH..${{ github.ref_name }} | head -10)
          
          if [ -z "$COMMITS" ]; then
            COMMITS="- Initial commit for this task"
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for Kiro files and generate PR body
        id: generate-pr-body
        if: steps.check-pr.outputs.pr_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_NUMBER="${{ steps.extract-task.outputs.task_number }}"
          ISSUE_NUMBER="${{ steps.find-issue.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.issue-details.outputs.issue_title }}"
          COMMITS="${{ steps.commit-summary.outputs.commits }}"
          
          # Try to find epic issue (look for "Epic:" in title)
          EPIC_NUMBER=$(gh issue list --search "Epic:" --json number --jq '.[0].number // empty')
          
          # Generate PR body
          PR_BODY="## $ISSUE_TITLE

### Description
This PR implements the changes for $ISSUE_TITLE as part of the Kiro-planned feature development.

### Related Issues
- Resolves #$ISSUE_NUMBER"
          
          if [ ! -z "$EPIC_NUMBER" ] && [ "$EPIC_NUMBER" != "null" ]; then
            PR_BODY="$PR_BODY
- Related to Epic #$EPIC_NUMBER"
          fi
          
          PR_BODY="$PR_BODY

### Changes Made
$COMMITS

### Testing Checklist
- [ ] Unit tests added/updated
- [ ] Integration tests pass
- [ ] Manual testing completed
- [ ] Edge cases tested
- [ ] Error handling tested

### Code Quality Checklist
- [ ] Code follows project standards
- [ ] TypeScript types properly defined
- [ ] Error handling implemented
- [ ] Loading states implemented
- [ ] No console.log statements left in code

### Review Checklist
- [ ] Functionality matches requirements
- [ ] Code is readable and maintainable
- [ ] Performance considerations addressed
- [ ] Security considerations addressed
- [ ] Accessibility requirements met

### Deployment Notes
<!-- Add any special deployment considerations -->

---
*This PR was auto-generated from Kiro task tracking*"
          
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.check-pr.outputs.pr_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TASK_NUMBER="${{ steps.extract-task.outputs.task_number }}"
          ISSUE_TITLE="${{ steps.issue-details.outputs.issue_title }}"
          PR_BODY="${{ steps.generate-pr-body.outputs.pr_body }}"
          BASE_BRANCH="${{ inputs.base_branch || 'main' }}"
          MILESTONE_NUMBER="${{ steps.issue-details.outputs.milestone_number }}"
          
          # Clean up the issue title for PR title
          PR_TITLE=$(echo "$ISSUE_TITLE" | sed "s/Task $TASK_NUMBER: //g")
          
          # Create PR
          MILESTONE_ARG=""
          if [ ! -z "$MILESTONE_NUMBER" ] && [ "$MILESTONE_NUMBER" != "null" ]; then
            MILESTONE_ARG="--milestone $MILESTONE_NUMBER"
          fi
          
          PR_NUMBER=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "$BASE_BRANCH" \
            --head "${{ github.ref_name }}" \
            --label "task,kiro-generated" \
            $MILESTONE_ARG \
            --json number --jq .number)
          
          echo "âœ… Created PR #$PR_NUMBER: $PR_TITLE"
          
          # Link the PR to the issue
          gh issue comment ${{ steps.find-issue.outputs.issue_number }} --body "ðŸ”— Pull Request created: #$PR_NUMBER"

      - name: Auto-assign reviewers
        if: steps.check-pr.outputs.pr_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest PR number for this branch
          LATEST_PR=$(gh pr list --head "${{ github.ref_name }}" --json number --jq '.[0].number // empty')
          
          if [ ! -z "$LATEST_PR" ] && [ "$LATEST_PR" != "null" ]; then
            # Add reviewer (repository owner if different from actor)
            if [ "${{ github.actor }}" != "${{ github.repository_owner }}" ]; then
              gh pr edit $LATEST_PR --add-reviewer "${{ github.repository_owner }}" || echo "Could not add reviewer"
            fi
            
            echo "âœ… PR #$LATEST_PR configured successfully"
          fi
