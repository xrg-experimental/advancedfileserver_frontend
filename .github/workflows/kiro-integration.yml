# .github/workflows/kiro-integration.yml
name: Kiro to GitHub Integration

on:
  workflow_dispatch:
    inputs:
      requirements_file:
        description: 'Path to requirements.md file'
        required: true
        default: '.kiro/specs/file-action-bar/requirements.md'
      design_file:
        description: 'Path to design.md file'
        required: true
        default: '.kiro/specs/file-action-bar/design.md'
      tasks_file:
        description: 'Path to tasks.md file'
        required: true
        default: '.kiro/specs/file-action-bar/tasks.md'
      project_name:
        description: 'Project name for issue titles'
        required: true
        default: 'File Action Bar'
      milestone_name:
        description: 'Milestone name (optional)'
        required: false

jobs:
  create-project-structure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      milestone_number: ${{ steps.create-milestone.outputs.milestone_number }}
      epic_issue_number: ${{ steps.create-epic.outputs.issue_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create milestone
        id: create-milestone
        if: ${{ inputs.milestone_name != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MILESTONE_NAME="${{ inputs.milestone_name }}"
          RESPONSE=$(gh api repos/${{ github.repository }}/milestones \
            --method POST \
            --field title="$MILESTONE_NAME" \
            --field description="Auto-generated milestone from Kiro planning")
          MILESTONE_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
          echo "milestone_number=$MILESTONE_NUMBER" >> $GITHUB_OUTPUT
          echo "Created milestone: $MILESTONE_NAME (#$MILESTONE_NUMBER)"

      - name: Parse Kiro files and create epic issue
        id: create-epic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read files and create epic issue body
          REQUIREMENTS_SUMMARY=""
          if [ -f "${{ inputs.requirements_file }}" ]; then
            REQUIREMENTS_SUMMARY=$(sed -n '/## Requirements/,/### Requirement 1/p' "${{ inputs.requirements_file }}" | head -n -1 | tail -n +2)
          fi
          
          ARCHITECTURE_OVERVIEW=""
          if [ -f "${{ inputs.design_file }}" ]; then
            ARCHITECTURE_OVERVIEW=$(sed -n '/## Architecture/,/### Component Structure/p' "${{ inputs.design_file }}" | head -n -1 | tail -n +2)
          fi

          EPIC_BODY="## Epic: ${{ inputs.project_name }}

### Overview
This epic tracks the implementation of the ${{ inputs.project_name }} feature based on Kiro-generated planning documents.

### Requirements Summary
${REQUIREMENTS_SUMMARY:-See attached requirements document}

### Architecture Overview
${ARCHITECTURE_OVERVIEW:-See attached design document}

### Related Documents
- [Requirements](${{ inputs.requirements_file }})
- [Design](${{ inputs.design_file }})
- [Tasks](${{ inputs.tasks_file }})

### Acceptance Criteria
- [ ] All task items completed
- [ ] Requirements validated
- [ ] Code reviewed and approved
- [ ] Tests passing

*Auto-generated from Kiro planning documents*"

          MILESTONE_ARG=""
          if [ -n "${{ steps.create-milestone.outputs.milestone_number }}" ]; then
            MILESTONE_ARG="--milestone ${{ steps.create-milestone.outputs.milestone_number }}"
          fi

          EPIC_NUMBER=$(gh issue create \
            --title "Epic: ${{ inputs.project_name }}" \
            --body "$EPIC_BODY" \
            --label "epic,enhancement" \
            $MILESTONE_ARG \
            --json number --jq .number)
          
          echo "issue_number=$EPIC_NUMBER" >> $GITHUB_OUTPUT
          echo "Created epic issue #$EPIC_NUMBER"

  create-task-issues:
    needs: create-project-structure
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Parse tasks and create issues
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Parse tasks file and create individual issues
        python3 << 'PYTHON_EOF'
import re
import subprocess
import os

# Read tasks file
with open('${{ inputs.tasks_file }}', 'r') as f:
    tasks_content = f.read()

# Parse tasks using improved regex
task_pattern = r'- \[([ x])\] (\d+)\. (.*?)(?=\n- \[|\n\n|$)'
matches = re.findall(task_pattern, tasks_content, re.DOTALL)

epic_number = '${{ needs.create-project-structure.outputs.epic_issue_number }}'
milestone_number = '${{ needs.create-project-structure.outputs.milestone_number }}'

print(f"Found {len(matches)} tasks to process")
print(f"Epic number: {epic_number}")
print(f"Milestone number: {milestone_number}")

for completed, task_num, content in matches:
    is_completed = completed == 'x'
    
    # Extract title (first line) and description
    lines = content.strip().split('\n')
    title = lines[0].strip()
    
    # Get description and requirements
    description_lines = []
    requirements = 'Not specified'
    
    for line in lines[1:]:
        line = line.strip()
        if line.startswith('_Requirements:') and line.endswith('_'):
            requirements = line.replace('_Requirements: ', '').replace('_', '')
        elif line and not line.startswith('_'):
            description_lines.append(line)
    
    description = '\n'.join(description_lines).strip()
    
    issue_body = f"""## Task #{task_num}: {title}

### Description
{description if description else 'Implementation details to be determined during development.'}

### Requirements Covered
{requirements}

### Related Epic
Part of epic #{epic_number}

### Definition of Done
- [ ] Implementation completed
- [ ] Unit tests written and passing
- [ ] Code reviewed
- [ ] Requirements validated
- [ ] Documentation updated

*Auto-generated from Kiro tasks*
"""
    
    # Create issue
    labels = 'task,enhancement'
    if is_completed:
        labels += ',completed'
    
    cmd = [
        'gh', 'issue', 'create',
        '--title', f'Task {task_num}: {title}',
        '--body', issue_body,
        '--label', labels
    ]
    
    if milestone_number and milestone_number != 'null':
        cmd.extend(['--milestone', milestone_number])
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        issue_url = result.stdout.strip()
        print(f"Created issue for task {task_num}: {title}")
        print(f"Issue URL: {issue_url}")
        
        # If task is completed, close the issue
        if is_completed:
            issue_number = issue_url.split('/')[-1]
            close_cmd = ['gh', 'issue', 'close', issue_number, '--reason', 'completed']
            subprocess.run(close_cmd, check=True)
            print(f"Closed completed task {task_num}")
            
    except subprocess.CalledProcessError as e:
        print(f"Failed to create issue for task {task_num}: {e}")
        print(f"Error output: {e.stderr}")
PYTHON_EOF

  create-project-board:
    needs: [create-project-structure, create-task-issues]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
    - name: Create project board
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a project board for tracking progress
        gh api repos/${{ github.repository }}/projects \
          --method POST \
          --field name="${{ inputs.project_name }} - Implementation Tracking" \
          --field body="Auto-generated project board for tracking ${{ inputs.project_name }} implementation"
        
        echo "âœ… Project board created successfully"
