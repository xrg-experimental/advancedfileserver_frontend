# .github/workflows/kiro-integration.yml
name: Kiro to GitHub Integration

on:
  workflow_dispatch:
    inputs:
      requirements_file:
        description: 'Path to requirements.md file'
        required: true
        default: '.kiro/specs/file-action-bar/requirements.md'
      design_file:
        description: 'Path to design.md file'
        required: true
        default: '.kiro/specs/file-action-bar/design.md'
      tasks_file:
        description: 'Path to tasks.md file'
        required: true
        default: '.kiro/specs/file-action-bar/tasks.md'
      project_name:
        description: 'Project name for issue titles'
        required: true
        default: 'File Action Bar'
      milestone_name:
        description: 'Milestone name (optional)'
        required: false

jobs:
  create-project-structure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      milestone_number: ${{ steps.create-milestone.outputs.milestone_number }}
      epic_issue_number: ${{ steps.create-epic.outputs.issue_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Create milestone
        id: create-milestone
        if: ${{ inputs.milestone_name != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MILESTONE_NAME="${{ inputs.milestone_name }}"
          RESPONSE=$(gh api repos/${{ github.repository }}/milestones \
            --method POST \
            --field title="$MILESTONE_NAME" \
            --field description="Auto-generated milestone from Kiro planning")
          MILESTONE_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
          echo "milestone_number=$MILESTONE_NUMBER" >> $GITHUB_OUTPUT
          echo "Created milestone: $MILESTONE_NAME (#$MILESTONE_NUMBER)"

      - name: Parse Kiro files and create epic issue
        id: create-epic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 << 'PYTHON_SCRIPT'
          import os
          import subprocess
          import sys

          def read_file_section(file_path, start_marker, end_marker=None):
              """Read a section from a markdown file between markers"""
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()
                  
                  start_idx = content.find(start_marker)
                  if start_idx == -1:
                      return "See attached document"
                  
                  start_idx += len(start_marker)
                  
                  if end_marker:
                      end_idx = content.find(end_marker, start_idx)
                      if end_idx != -1:
                        return content[start_idx:end_idx].strip()
                  
                  # If no end marker or not found, take next 500 chars
                  return content[start_idx:start_idx+500].strip()
              except Exception as e:
                  return f"Error reading file: {e}"

          # Read file sections
          requirements_summary = read_file_section(
              '${{ inputs.requirements_file }}', 
              '## Requirements', 
              '### Requirement 1'
          )

          architecture_overview = read_file_section(
              '${{ inputs.design_file }}', 
              '## Architecture', 
              '### Component Structure'
          )

          epic_body = f"""## Epic: ${{ inputs.project_name }}

          ### Overview
          This epic tracks the implementation of the ${{ inputs.project_name }} feature based on Kiro-generated planning documents.

          ### Requirements Summary
          {requirements_summary}

          ### Architecture Overview
          {architecture_overview}

          ### Related Documents
          - [Requirements](${{ inputs.requirements_file }})
          - [Design](${{ inputs.design_file }})
          - [Tasks](${{ inputs.tasks_file }})

          ### Acceptance Criteria
          - [ ] All task items completed
          - [ ] Requirements validated
          - [ ] Code reviewed and approved
          - [ ] Tests passing

          *Auto-generated from Kiro planning documents*"""

          # Create epic issue
          milestone_arg = []
          milestone_number = '${{ steps.create-milestone.outputs.milestone_number }}'
          if milestone_number and milestone_number != '':
              milestone_arg = ['--milestone', milestone_number]

          cmd = [
              'gh', 'issue', 'create',
              '--title', 'Epic: ${{ inputs.project_name }}',
              '--body', epic_body,
              '--label', 'epic,enhancement'
          ] + milestone_arg + ['--json', 'number', '--jq', '.number']

          try:
              result = subprocess.run(cmd, capture_output=True, text=True, check=True)
              epic_number = result.stdout.strip()
              print(f"issue_number={epic_number}")
              print(f"Created epic issue #{epic_number}")
              
              # Set GitHub output
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"issue_number={epic_number}\n")
                  
          except subprocess.CalledProcessError as e:
              print(f"Error creating epic issue: {e}")
              print(f"Error output: {e.stderr}")
              sys.exit(1)
          PYTHON_SCRIPT

  create-task-issues:
    needs: create-project-structure
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
      
    - name: Parse tasks and create issues
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python3 << 'PYTHON_SCRIPT'
        import re
        import subprocess
        import sys

        def parse_tasks_file(file_path):
            """Parse the tasks.md file and extract task information"""
            try:
                with open(file_path, 'r') as f:
                    content = f.read()
            except FileNotFoundError:
                print(f"Tasks file not found: {file_path}")
                return []
            
            # Improved regex to capture task details
            task_pattern = r'- \[([ x])\] (\d+)\. (.*?)(?=\n- \[|\n\n|$)'
            matches = re.findall(task_pattern, content, re.DOTALL)
            
            tasks = []
            for completed, task_num, content_block in matches:
                is_completed = completed == 'x'
                
                # Split content into lines and process
                lines = content_block.strip().split('\n')
                title = lines[0].strip()
                
                # Extract description and requirements
                description_lines = []
                requirements = 'Not specified'
                
                for line in lines[1:]:
                    line = line.strip()
                    if line.startswith('_Requirements:') and line.endswith('_'):
                        requirements = line.replace('_Requirements: ', '').replace('_', '')
                    elif line and not line.startswith('_'):
                        description_lines.append(line)
                
                description = '\n'.join(description_lines).strip()
                
                tasks.append({
                    'number': task_num,
                    'title': title,
                    'description': description,
                    'requirements': requirements,
                    'completed': is_completed
                })
            
            return tasks

        def create_task_issue(task, epic_number, milestone_number):
            """Create a GitHub issue for a task"""
            issue_body = f"""## Task #{task['number']}: {task['title']}

        ### Description
        {task['description'] if task['description'] else 'Implementation details to be determined during development.'}

        ### Requirements Covered
        {task['requirements']}

        ### Related Epic
        Part of epic #{epic_number}

        ### Definition of Done
        - [ ] Implementation completed
        - [ ] Unit tests written and passing
        - [ ] Code reviewed
        - [ ] Requirements validated
        - [ ] Documentation updated

        *Auto-generated from Kiro tasks*
        """
            
            labels = 'task,enhancement'
            if task['completed']:
                labels += ',completed'
            
            cmd = [
                'gh', 'issue', 'create',
                '--title', f"Task {task['number']}: {task['title']}",
                '--body', issue_body,
                '--label', labels
            ]
            
            if milestone_number and milestone_number != 'null' and milestone_number != '':
                cmd.extend(['--milestone', milestone_number])
            
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                issue_url = result.stdout.strip()
                print(f"Created issue for task {task['number']}: {task['title']}")
                
                # If task is completed, close the issue
                if task['completed']:
                    issue_number = issue_url.split('/')[-1]
                    close_cmd = ['gh', 'issue', 'close', issue_number, '--reason', 'completed']
                    subprocess.run(close_cmd, check=True)
                    print(f"Closed completed task {task['number']}")
                    
                return True
            except subprocess.CalledProcessError as e:
                print(f"Failed to create issue for task {task['number']}: {e}")
                print(f"Error output: {e.stderr}")
                return False

        # Main execution
        epic_number = '${{ needs.create-project-structure.outputs.epic_issue_number }}'
        milestone_number = '${{ needs.create-project-structure.outputs.milestone_number }}'

        print(f"Epic number: {epic_number}")
        print(f"Milestone number: {milestone_number}")

        # Parse tasks
        tasks = parse_tasks_file('${{ inputs.tasks_file }}')
        print(f"Found {len(tasks)} tasks to process")

        # Create issues for each task
        success_count = 0
        for task in tasks:
            if create_task_issue(task, epic_number, milestone_number):
                success_count += 1

        print(f"Successfully created {success_count} out of {len(tasks)} task issues")
        PYTHON_SCRIPT
